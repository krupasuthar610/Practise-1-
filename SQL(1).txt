1. SQL Basics
----------------
DQL (Data Query Language)
SELECT, WHERE, GROUP BY, ORDER BY, HAVING.
Aggregate functions: COUNT(), SUM(), AVG(), MAX(), MIN().


SELECT

-- Select all columns from the table
SELECT * FROM employees;

-- Select specific columns (Employee Name and Department)
SELECT Name, Department FROM employees;

-- Select columns with computed values (Add a 10% bonus to Salary)
SELECT Name, Salary, Salary * 1.1 AS SalaryWithBonus FROM employees;


WHERE

-- Select employees from the IT department
SELECT * FROM employees WHERE Department = 'IT';

-- Select employees with a salary greater than 60000
SELECT * FROM employees WHERE Salary > 60000;

-- Combine conditions (Employees in IT department with salary > 60000)
SELECT * FROM employees WHERE Department = 'IT' AND Salary > 60000;

-- Using a range with BETWEEN (Employees who joined between 2019 and 2021)
SELECT * FROM employees WHERE JoiningDate BETWEEN '2019-01-01' AND '2021-12-31';

-- Using a list with IN (Employees in specific departments)
SELECT * FROM employees WHERE Department IN ('HR', 'Finance');


GROUP BY

The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".

The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.

-- Calculate the total salary in each department
SELECT Department, SUM(Salary) AS TotalSalary FROM employees GROUP BY Department;

-- Count the number of employees in each department
SELECT Department, COUNT(*) AS EmployeeCount FROM employees GROUP BY Department;

-- Group by multiple columns (e.g., Department and Salary range)
SELECT Department, CASE 
                      WHEN Salary < 50000 THEN 'Low'
                      WHEN Salary BETWEEN 50000 AND 70000 THEN 'Medium'
                      ELSE 'High'
                  END AS SalaryRange, COUNT(*) AS EmployeeCount
FROM employees
GROUP BY Department, SalaryRange;


ORDER BY

-- Sort employees by Salary in ascending order
SELECT * FROM employees ORDER BY Salary ASC;

-- Sort employees by Department in alphabetical order, then Salary in descending order
SELECT * FROM employees ORDER BY Department ASC, Salary DESC;

-- Using alias in sorting (Sort by computed value - Salary with a bonus)
SELECT Name, Salary, Salary * 1.1 AS SalaryWithBonus 
FROM employees 
ORDER BY SalaryWithBonus DESC;


HAVING 

The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

-- Find departments with total salary greater than 100,000
SELECT Department, SUM(Salary) AS TotalSalary 
FROM employees 
GROUP BY Department 
HAVING SUM(Salary) > 100000;

-- Find departments with an average salary greater than 60,000
SELECT Department, AVG(Salary) AS AverageSalary 
FROM employees 
GROUP BY Department 
HAVING AVG(Salary) > 60000;

-- Combine HAVING with ORDER BY
SELECT Department, COUNT(*) AS EmployeeCount 
FROM employees 
GROUP BY Department 
HAVING COUNT(*) > 1 
ORDER BY EmployeeCount DESC;

---------------------------------------------------------------------------------------------
DDL (Data Definition Language)
CREATE, ALTER, DROP, TRUNCATE, RENAME.

ALTER Statement (Modify Table Structure)
DROP Statement (Delete a Table, Database, or Index)
TRUNCATE Statement (Delete All Data but Keep Table Structure)
RENAME Statement (Rename Table Name)

------------------------------------------------------------------------------------
TCL (Transaction Control Language)
COMMIT, ROLLBACK, SAVEPOINT, SET TRANSACTION.

BEGIN or implicitly starts a transaction.
Perform INSERT, UPDATE, or DELETE queries as part of the transaction.
Optionally create a SAVEPOINT to rollback to a specific point if needed.
Use ROLLBACK to undo changes, or COMMIT to permanently save them.
You can manage transaction properties with SET TRANSACTION.

------------------------------------------------------------------------------------
DCL (Data Control Language)
GRANT, REVOKE.

GRANT = Give permissions (e.g., view or modify data).
REVOKE = Remove those permissions.

---------------------------------------------------------------------------------------
DML (Data Manipulation Language)
INSERT, UPDATE, DELETE.
