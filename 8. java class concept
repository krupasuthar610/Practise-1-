class Test{
     variables
     methods
     constructors
     blocks(instance & static)
}

variables :
variables are used to store the data. 
varaible is a named memory location.
every variable must contains some type.

int num = 10;

there are three type of varaible in java,
1. local 
2. instance 
3. static

1. Local var.
a. declared inside the methods or constructor or blocks
b. scope inside the methods or constructor or block
c. memory allocated when method starts, memory destroyed when method completed.
d. stored in Stack memory

2. instance variables:
a. declared inside the class.
b. scope inside the class.
c. memory allocated when object created. 
   memory destroyed when object destroyed.
d. stored in Heap memory

3. static variable
Decalred : inside the class
Scop     : inside the class
Memory   : Memory allocated when class loading 
Stored in : Method area.


memories in java:
 Stack
 Heap
 method area
 Native method stacks
 String constant pool

-------------------------------------------------------------------------------------------------------------------------
Methods : used to write logics of the application.
There are two types of methods
a. instance method
     void add()
     {  //Logics: intance area
     }

b. Static method
    static void add()
    {  //logics: static area
    }

Note: 
instance methods possible to override.
static method are not possible to override.

instance methods we can access using object.
static methods we can access using class-name.


Note: you must call all userdefined methods inside the main method then only those methods are 
       executed. (ex. craete object from that)

Note: always access the instance data using object-name.
      but instance to instance direct access is possible but only with in the same class.

Note: It Is possible to create the objects in both userdefined & predefined method.
      Once we create the object inside the method the scope of the object is with in the method.

Note: Always access the instance data using object name
      Always access the static data using class-name.

case 1: inside the class it is not possible to write the logics directly.
case 2: inside the class declare the method, inside the method write the logics.

Method syntax :

modifiers_list return_type Method_name(arguments_list)throws Exception

Method_name       : functionality name
modifiers_list    : functionality inputs
return_type       : functionality return value
modifiers_list    : to give the permission
throws Exception  : to handle the exception


ex:
public void disp()
private String Login(String username, String password)
protected int add(int num1, int num2) throws Exception

Method signature: method name & arguments list is called method signature
        Method_name(arguments_list)


case 2: here local and instance variables are having same names.

class Test
{
    int val1= 10, val2 = 20; //instance v. 
   
    void add(int val1, int val2){ //local v.
      System.out.println(val1 + val2);
      
      Test t = new Test();
      System.out.println(t.val1 + t.val2)

      System.out.println(this.val1 + this.val2);
   }
   public ststic void main(String[] args){
    
    Test t = new Test();
     t.add(100,200);
  }
}

* if the application local & instance variables with same name, in this case to represent instance data use
  object name.
* In place of object it is possible to use this keyword.
* this keyword represent current class object.
* Inside the static are this keyword is not allowed.


-----------------------------------------------------------------------------------------------------------------
CONSTRUCTOR

Test        t            =    new       Test();
class-name  object Name       keyword   constructor

Rules:
a. Constructor name & class-name must be same.
b. Constructor can take the arguments.
c. Constructor return type not allowed even void.


class Tset
{  //0-arg cons
   Test()
   { logics
   } 

   //1-arg cons
   Test(int a)
   {  logics
   }
}

there are two types of constructors:
a. default constructor : generated by compiler    : 0-arg cons with empty impl
b. userdefined constructor : declared by devloper : 0-arg or prameters cons.

a. Constructor is a special method to write the logics these logics are executed when we create the object.
b. userdefined 0-arg Constructor is not a default Constructor.
   only compiler generated Constructor is called default Constructor.

a. inside the class if we are not declaring any constructor then only compiler genrates default constructor.
b. inside the class once we declare the Constructor compiler will not generate default Constructor.


EX:
class Test
{   
   void wish(){
      Sysout("GM");
  }
  public static void main(String[] args){
	
   //named object : an object with name
     Test t = new Test();
     t.wish();

   //nameless object : an object without name
      new Test().wish();

  }
} 


class vs. Object
a. class is a logical entity contains logicas of the application.
   object is physical entity represents memory.
b. class is a blue print decides object creation.
   without class not possible to create object.
c. based on the single class it is possible to create the multiple objects,
       every object need memory space.
d. declare the class using class keyword
   create the object using new keyword.


* add one cons. to unother cons. use this. keyword
* this keyword write in must be first statement in constructor.


class Tset
{  
   Test(){ 
    this(10);
    System.out.println("0-arg cons");
   } 
;;
   Test(){ 
    this(10,20);  
    System.out.println("1-arg cons");
   }

   Test(int a, int b)
   {  System.out.println("2-arg cons");
   }
}


* One method can call multiple methods.
* One Constructor can call only one Constructor.
-------------------------------------------------------

1. variables are use to store the data.
2. Method are used to write the business logics of the application.
3. constructors are used to initialize the data during object creation.


instance var. v/s static var. :

a.instance variables every object separate memory craeted.
  static varaibles only one copy of memory craeted that can be shared by all objects.

b.once we do the modification on instance variable it will reflect on specefic object.
  one we do the modification on static variables it will reflect on all objects.


-----------------------------------------------------------------------------------------------------------------

BLOCKS


public class demo1 {
	demo1() {
		System.out.println("0 - arg const");
		}	
	demo1(int no){
		System.out.println("1 arg constrctor");
	}
	static {
		System.out.println("staic block");
	}
	{System.out.println("instance");
	}
	public static void main(String[] args) {
		new demo1();	
		new demo1(10);
	}
}

a. static blocks are executed during class loading only once.
b. instance blocks & constructors both are executed during object creation.
   but instance blocks are executed before constructor execution.

NOTE: constructor logics are specefic to object but 
      instance blocks logics are comman to all objects.


* instance block execuction depends on object creation
  not on constructor creation.

